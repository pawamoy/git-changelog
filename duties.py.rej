diff a/duties.py b/duties.py	(rejected hunks)
@@ -2,2 +2,4 @@
 
+from __future__ import annotations
+
 import importlib
@@ -4,3 +6,2 @@ import importlib
 import os
-import re
 import sys
@@ -8,4 +9,2 @@ from io import StringIO
 from pathlib import Path
-from typing import List, Optional, Pattern
-from urllib.request import urlopen
 
@@ -22,63 +21,2 @@ PTY = not WINDOWS and not CI
 
-def _latest(lines: List[str], regex: Pattern) -> Optional[str]:
-    for line in lines:
-        match = regex.search(line)
-        if match:
-            return match.groupdict()["version"]
-    return None
-
-
-def _unreleased(versions, last_release):
-    for index, version in enumerate(versions):
-        if version.tag == last_release:
-            return versions[:index]
-    return versions
-
-
-def update_changelog(
-    inplace_file: str,
-    marker: str,
-    version_regex: str,
-    template_url: str,
-) -> None:
-    """
-    Update the given changelog file in place.
-
-    Arguments:
-        inplace_file: The file to update in-place.
-        marker: The line after which to insert new contents.
-        version_regex: A regular expression to find currently documented versions in the file.
-        template_url: The URL to the Jinja template used to render contents.
-    """
-    from git_changelog.build import Changelog
-    from git_changelog.commit import AngularStyle
-    from jinja2.sandbox import SandboxedEnvironment
-
-    AngularStyle.DEFAULT_RENDER.insert(0, AngularStyle.TYPES["build"])
-    env = SandboxedEnvironment(autoescape=False)
-    template_text = urlopen(template_url).read().decode("utf8")  # noqa: S310
-    template = env.from_string(template_text)
-    changelog = Changelog(".", style="angular")
-
-    if len(changelog.versions_list) == 1:
-        last_version = changelog.versions_list[0]
-        if last_version.planned_tag is None:
-            planned_tag = "0.1.0"
-            last_version.tag = planned_tag
-            last_version.url += planned_tag
-            last_version.compare_url = last_version.compare_url.replace("HEAD", planned_tag)
-
-    with open(inplace_file, "r") as changelog_file:
-        lines = changelog_file.read().splitlines()
-
-    last_released = _latest(lines, re.compile(version_regex))
-    if last_released:
-        changelog.versions_list = _unreleased(changelog.versions_list, last_released)
-    rendered = template.render(changelog=changelog, inplace=True)
-    lines[lines.index(marker)] = rendered
-
-    with open(inplace_file, "w") as changelog_file:  # noqa: WPS440
-        changelog_file.write("\n".join(lines).rstrip("\n") + "\n")
-
-
 @duty
@@ -85,4 +23,3 @@ def update_changelog(
 def changelog(ctx):
-    """
-    Update the changelog in-place with latest commits.
+    """Update the changelog in-place with latest commits.
 
@@ -91,11 +28,16 @@ def changelog(ctx):
     """
-    commit = "166758a98d5e544aaa94fda698128e00733497f4"
-    template_url = f"https://raw.githubusercontent.com/pawamoy/jinja-templates/{commit}/keepachangelog.md"
+    from git_changelog.cli import build_and_render as git_changelog
+
     ctx.run(
-        update_changelog,
+        git_changelog,
         kwargs={
-            "inplace_file": "CHANGELOG.md",
-            "marker": "<!-- insertion marker -->",
-            "version_regex": r"^## \[v?(?P<version>[^\]]+)",
-            "template_url": template_url,
+            "repository": ".",
+            "output": "CHANGELOG.md",
+            "convention": "angular",
+            "template": "keepachangelog",
+            "parse_trailers": True,
+            "parse_refs": False,
+            "sections": ("build", "deps", "feat", "fix", "refactor"),
+            "bump_latest": True,
+            "in_place": True,
         },
@@ -102,3 +44,2 @@ def changelog(ctx):
         title="Updating changelog",
-        pty=PTY,
     )
@@ -108,4 +49,3 @@ def changelog(ctx):
 def check(ctx):
-    """
-    Check it all!
+    """Check it all!
 
@@ -118,4 +58,3 @@ def check(ctx):
 def check_quality(ctx, files=PY_SRC):
-    """
-    Check the code quality.
+    """Check the code quality.
 
@@ -130,4 +69,3 @@ def check_quality(ctx, files=PY_SRC):
 def check_dependencies(ctx):
-    """
-    Check for vulnerabilities in dependencies.
+    """Check for vulnerabilities in dependencies.
 
@@ -179,4 +117,3 @@ def check_dependencies(ctx):
 def check_docs(ctx):
-    """
-    Check if the documentation builds correctly.
+    """Check if the documentation builds correctly.
 
@@ -203,4 +140,3 @@ def check_types(ctx):  # noqa: WPS231
 def clean(ctx):
-    """
-    Delete temporary files.
+    """Delete temporary files.
 
@@ -224,4 +160,3 @@ def clean(ctx):
 def docs(ctx):
-    """
-    Build the documentation locally.
+    """Build the documentation locally.
 
@@ -235,4 +170,3 @@ def docs(ctx):
 def docs_serve(ctx, host="127.0.0.1", port=8000):
-    """
-    Serve the documentation (localhost:8000).
+    """Serve the documentation (localhost:8000).
 
@@ -248,4 +182,3 @@ def docs_serve(ctx, host="127.0.0.1", port=8000):
 def docs_deploy(ctx):
-    """
-    Deploy the documentation on GitHub pages.
+    """Deploy the documentation on GitHub pages.
 
@@ -259,4 +192,3 @@ def docs_deploy(ctx):
 def format(ctx):
-    """
-    Run formatting tools on the code.
+    """Run formatting tools on the code.
 
@@ -276,4 +208,3 @@ def format(ctx):
 def release(ctx, version):
-    """
-    Release a new Python package.
+    """Release a new Python package.
 
@@ -296,4 +227,3 @@ def release(ctx, version):
 def coverage(ctx):
-    """
-    Report coverage as text and HTML.
+    """Report coverage as text and HTML.
 
@@ -309,4 +239,3 @@ def coverage(ctx):
 def test(ctx, match: str = ""):
-    """
-    Run the test suite.
+    """Run the test suite.
 
