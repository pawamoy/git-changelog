{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"git-changelog \u00a4 Automatic Changelog generator using Jinja2 templates. From git logs to change logs. Features \u00a4 Jinja2 templates! You get full control over the rendering. Built-in Keep a Changelog and Angular templates (also see Conventional Changelog ). Commit styles/conventions parsing. Built-in Angular , Conventional Commit , Atom and basic styles. Git service/provider agnostic, plus references parsing (issues, commits, etc.). Built-in GitHub and Gitlab support. Understands Semantic Versioning : major/minor/patch for versions and commits. Guesses next version based on last commits. Todo: Plugin architecture , to support more commit styles and git services. Template context injection , to furthermore customize how your changelog will be rendered. Easy access to \"Breaking Changes\" in the templates. Update changelog in-place , paired with commits/dates/versions range limitation ability . Requirements \u00a4 git-changelog requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12 Installation \u00a4 With pip : python3.6 -m pip install git-changelog With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 git-changelog Usage (command-line) \u00a4 usage: git-changelog [-h] [-o OUTPUT] [-s {angular,atom,basic}] [-t {angular,keepachangelog}] [-v] REPOSITORY Command line tool for git-changelog Python package. positional arguments: REPOSITORY The repository path, relative or absolute. optional arguments: -h, --help Show this help message and exit. -o OUTPUT, --output OUTPUT Output to given file. Default: stdout. -s {angular,atom,basic}, --style {angular,atom,basic} The commit style to match against. -t {angular,keepachangelog}, --template {angular,keepachangelog} The Jinja2 template to use. Prefix with \"path:\" to specify the path to a directory containing a file named \"changelog.md\". -v, --version Show the current version of the program and exit.","title":"Overview"},{"location":"#git-changelog","text":"Automatic Changelog generator using Jinja2 templates. From git logs to change logs.","title":"git-changelog"},{"location":"#features","text":"Jinja2 templates! You get full control over the rendering. Built-in Keep a Changelog and Angular templates (also see Conventional Changelog ). Commit styles/conventions parsing. Built-in Angular , Conventional Commit , Atom and basic styles. Git service/provider agnostic, plus references parsing (issues, commits, etc.). Built-in GitHub and Gitlab support. Understands Semantic Versioning : major/minor/patch for versions and commits. Guesses next version based on last commits. Todo: Plugin architecture , to support more commit styles and git services. Template context injection , to furthermore customize how your changelog will be rendered. Easy access to \"Breaking Changes\" in the templates. Update changelog in-place , paired with commits/dates/versions range limitation ability .","title":"Features"},{"location":"#requirements","text":"git-changelog requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install git-changelog With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 git-changelog","title":"Installation"},{"location":"#usage-command-line","text":"usage: git-changelog [-h] [-o OUTPUT] [-s {angular,atom,basic}] [-t {angular,keepachangelog}] [-v] REPOSITORY Command line tool for git-changelog Python package. positional arguments: REPOSITORY The repository path, relative or absolute. optional arguments: -h, --help Show this help message and exit. -o OUTPUT, --output OUTPUT Output to given file. Default: stdout. -s {angular,atom,basic}, --style {angular,atom,basic} The commit style to match against. -t {angular,keepachangelog}, --template {angular,keepachangelog} The Jinja2 template to use. Prefix with \"path:\" to specify the path to a directory containing a file named \"changelog.md\". -v, --version Show the current version of the program and exit.","title":"Usage (command-line)"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.5.0 - 2021-11-14 \u00a4 Compare with 0.4.2 Dependencies \u00a4 Accept Jinja2 3.x ( 9ef3259 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Allow to choose conventional style from CLI ( aafa779 by Ivan Gonzalez). PR #32 Add ConventionalCommit commit type ( 3becce8 by Kevin Squire). PR #30 Bug Fixes \u00a4 Properly bump semver version ( ecc7dd4 by Kevin Squire). References: #31 Fix typo in keepachangelog template ( fa9b434 by Alexander Schleifer). PR #28 Code Refactoring \u00a4 Use semver to bump version more reliably ( b68a565 by Timoth\u00e9e Mazzucotelli). 0.4.2 - 2021-01-06 \u00a4 Compare with 0.4.1 Bug Fixes \u00a4 Handle prerelease tags better ( 4bcc451 by Timoth\u00e9e Mazzucotelli). 0.4.1 - 2020-12-21 \u00a4 Compare with 0.4.0 Bug Fixes \u00a4 Fix wrong version being printed ( 0ec050f by Timoth\u00e9e Mazzucotelli). 0.4.0 - 2020-05-21 \u00a4 Compare with 0.3.0 Bug Fixes \u00a4 Use actual url for references ( 46a8790 by Timoth\u00e9e Mazzucotelli). Use style subject if possible ( 7f2c3ad by Timoth\u00e9e Mazzucotelli). Correctly handle nested subgroups for gitlab repos ( 8ca990b by Timoth\u00e9e Mazzucotelli). Fix bumping versions starting with \"v\" ( 44e7644 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Move styles into new commit module to avoid cyclic dependencies ( d90bd15 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Improve changelog rendering ( e9dd3f4 by Timoth\u00e9e Mazzucotelli). Use today's date for current version Move \"compare\" link below the heading (better table of contents in documentation) Improve \"compare\" links to handle first and current version Use selected commit types to render sections Add default commit types to render variable ( 173392a by Timoth\u00e9e Mazzucotelli). Always use today's date for unreleased version ( 1c34fa8 by Timoth\u00e9e Mazzucotelli). 0.3.0 - 2020-03-31 \u00a4 Compare with 0.2.0 Bug Fixes \u00a4 Fix is_minor method for version ( 6d08978 by Lo\u00efc Viennois). Fix parse_refs method for ProviderRefParser ( dc51589 by Lo\u00efc Viennois). Correctly detect major version, for both angular style and basic style ( 7385e19 by Lo\u00efc Viennois). Code Refactoring \u00a4 Add type hints to all classes and methods ( 95276ef by Lo\u00efc Viennois). Features \u00a4 Update template keepachangelog ( ce76ed6 ) by RainChen: Capitalize commit subject Show author name for each commit Sort commits by date Unique commit subjects 0.2.0 - 2019-11-24 \u00a4 Compare with 0.1.1 Drop support for Python < 3.6. Use poetry to manage the project! Fixed \u00a4 Fix detection of feature (is_minor) for angular style ( 4fbf0ee ). 0.1.1 - 2018-06-27 \u00a4 Compare with 0.1.0 Fixed \u00a4 Fix build with MANIFEST.in, add license file ( 013fb69 ). Misc \u00a4 Improve readability ( 5e590f6 ). 0.1.0 - 2018-06-27 \u00a4 Compare with first commit Added \u00a4 Add github/github regexes ( 584fd73 ). Fixed \u00a4 Fix patch bump ( 8470e69 ). Fix refs parsing ( 8c77cb7 ). Misc \u00a4 Continue packaging (#6) ( a29af2c ). Finish packaging (#6) ( e92b492 ). Implement reference parsing ( a9b4a89 ). Improve angular template, improve style/refs system ( 5b87d48 ). Initial commit ( 83845fe ). Package code (#6) ( 1219eaf ). Update changelog for version 0.1.0 ( 14edcaf ). Update changelog for version 0.1.0 ( 610633d ). Update changelog for version 0.1.0 ( 2eaaa2e ). Work in progress ( 27a60e8 ).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#050-2021-11-14","text":"Compare with 0.4.2","title":"0.5.0 - 2021-11-14"},{"location":"changelog/#dependencies","text":"Accept Jinja2 3.x ( 9ef3259 by Timoth\u00e9e Mazzucotelli).","title":"Dependencies"},{"location":"changelog/#features","text":"Allow to choose conventional style from CLI ( aafa779 by Ivan Gonzalez). PR #32 Add ConventionalCommit commit type ( 3becce8 by Kevin Squire). PR #30","title":"Features"},{"location":"changelog/#bug-fixes","text":"Properly bump semver version ( ecc7dd4 by Kevin Squire). References: #31 Fix typo in keepachangelog template ( fa9b434 by Alexander Schleifer). PR #28","title":"Bug Fixes"},{"location":"changelog/#code-refactoring","text":"Use semver to bump version more reliably ( b68a565 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#042-2021-01-06","text":"Compare with 0.4.1","title":"0.4.2 - 2021-01-06"},{"location":"changelog/#bug-fixes_1","text":"Handle prerelease tags better ( 4bcc451 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#041-2020-12-21","text":"Compare with 0.4.0","title":"0.4.1 - 2020-12-21"},{"location":"changelog/#bug-fixes_2","text":"Fix wrong version being printed ( 0ec050f by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#040-2020-05-21","text":"Compare with 0.3.0","title":"0.4.0 - 2020-05-21"},{"location":"changelog/#bug-fixes_3","text":"Use actual url for references ( 46a8790 by Timoth\u00e9e Mazzucotelli). Use style subject if possible ( 7f2c3ad by Timoth\u00e9e Mazzucotelli). Correctly handle nested subgroups for gitlab repos ( 8ca990b by Timoth\u00e9e Mazzucotelli). Fix bumping versions starting with \"v\" ( 44e7644 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_1","text":"Move styles into new commit module to avoid cyclic dependencies ( d90bd15 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#features_1","text":"Improve changelog rendering ( e9dd3f4 by Timoth\u00e9e Mazzucotelli). Use today's date for current version Move \"compare\" link below the heading (better table of contents in documentation) Improve \"compare\" links to handle first and current version Use selected commit types to render sections Add default commit types to render variable ( 173392a by Timoth\u00e9e Mazzucotelli). Always use today's date for unreleased version ( 1c34fa8 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#030-2020-03-31","text":"Compare with 0.2.0","title":"0.3.0 - 2020-03-31"},{"location":"changelog/#bug-fixes_4","text":"Fix is_minor method for version ( 6d08978 by Lo\u00efc Viennois). Fix parse_refs method for ProviderRefParser ( dc51589 by Lo\u00efc Viennois). Correctly detect major version, for both angular style and basic style ( 7385e19 by Lo\u00efc Viennois).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_2","text":"Add type hints to all classes and methods ( 95276ef by Lo\u00efc Viennois).","title":"Code Refactoring"},{"location":"changelog/#features_2","text":"Update template keepachangelog ( ce76ed6 ) by RainChen: Capitalize commit subject Show author name for each commit Sort commits by date Unique commit subjects","title":"Features"},{"location":"changelog/#020-2019-11-24","text":"Compare with 0.1.1 Drop support for Python < 3.6. Use poetry to manage the project!","title":"0.2.0 - 2019-11-24"},{"location":"changelog/#fixed","text":"Fix detection of feature (is_minor) for angular style ( 4fbf0ee ).","title":"Fixed"},{"location":"changelog/#011-2018-06-27","text":"Compare with 0.1.0","title":"0.1.1 - 2018-06-27"},{"location":"changelog/#fixed_1","text":"Fix build with MANIFEST.in, add license file ( 013fb69 ).","title":"Fixed"},{"location":"changelog/#misc","text":"Improve readability ( 5e590f6 ).","title":"Misc"},{"location":"changelog/#010-2018-06-27","text":"Compare with first commit","title":"0.1.0 - 2018-06-27"},{"location":"changelog/#added","text":"Add github/github regexes ( 584fd73 ).","title":"Added"},{"location":"changelog/#fixed_2","text":"Fix patch bump ( 8470e69 ). Fix refs parsing ( 8c77cb7 ).","title":"Fixed"},{"location":"changelog/#misc_1","text":"Continue packaging (#6) ( a29af2c ). Finish packaging (#6) ( e92b492 ). Implement reference parsing ( a9b4a89 ). Improve angular template, improve style/refs system ( 5b87d48 ). Initial commit ( 83845fe ). Package code (#6) ( 1219eaf ). Update changelog for version 0.1.0 ( 14edcaf ). Update changelog for version 0.1.0 ( 610633d ). Update changelog for version 0.1.0 ( 2eaaa2e ). Work in progress ( 27a60e8 ).","title":"Misc"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd git-changelog make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run git-changelog [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd git-changelog make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run git-changelog [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build git-changelog . Thank you! python | pdm | copier-pdm Direct dependencies \u00a4 autoflake | black | darglint | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | isort | jinja2 | mkdocs | mkdocs-coverage | mkdocs-gen-files | mkdocs-literate-nav | mkdocs-material | mkdocstrings | mypy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | semver | toml | wps-light Indirect dependencies \u00a4 ansimarkup | astor | astunparse | atomicwrites | attrs | bandit | cached-property | click | colorama | coverage | dataclasses | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | ghp-import | gitdb | gitpython | importlib-metadata | iniconfig | markdown | markupsafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | packaging | pathspec | pbr | platformdirs | pluggy | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | pygments | pymdown-extensions | pyparsing | pytest-forked | python-dateutil | pytkdocs | pyyaml | pyyaml-env-tag | regex | setuptools | six | smmap | snowballstemmer | stevedore | termcolor | tomli | typed-ast | typing-extensions | watchdog | wheel | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build git-changelog . Thank you! python | pdm | copier-pdm","title":"Credits"},{"location":"credits/#direct-dependencies","text":"autoflake | black | darglint | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | isort | jinja2 | mkdocs | mkdocs-coverage | mkdocs-gen-files | mkdocs-literate-nav | mkdocs-material | mkdocstrings | mypy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | semver | toml | wps-light","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | astor | astunparse | atomicwrites | attrs | bandit | cached-property | click | colorama | coverage | dataclasses | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | ghp-import | gitdb | gitpython | importlib-metadata | iniconfig | markdown | markupsafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | packaging | pathspec | pbr | platformdirs | pluggy | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | pygments | pymdown-extensions | pyparsing | pytest-forked | python-dateutil | pytkdocs | pyyaml | pyyaml-env-tag | regex | setuptools | six | smmap | snowballstemmer | stevedore | termcolor | tomli | typed-ast | typing-extensions | watchdog | wheel | zipp More credits from the author","title":"Indirect dependencies"},{"location":"license/","text":"ISC License Copyright (c) 2018, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"git_changelog __init__.py __main__.py build.py cli.py commit.py providers.py templates __init__.py","title":"SUMMARY"},{"location":"reference/__init__/","text":"git-changelog package. Automatic Changelog generator using Jinja2 templates.","title":"__init__.py"},{"location":"reference/__main__/","text":"Entry-point module, in case you use python -m git_changelog . Why does this file exist, and why __main__ ? For more info, read: https://www.python.org/dev/peps/pep-0338/ https://docs.python.org/3/using/cmdline.html#cmdoption-m","title":"__main__.py"},{"location":"reference/build/","text":"The module responsible for building the data. Changelog \u00a4 The main changelog class. __init__ ( self , repository , provider = None , style = None ) special \u00a4 Initialization method. PARAMETER DESCRIPTION repository The repository (directory) for which to build the changelog. TYPE: str provider The provider to use (github.com, gitlab.com, etc.). TYPE: Optional[git_changelog.providers.ProviderRefParser] DEFAULT: None style The commit style to use (angular, atom, etc.). TYPE: Union[str, git_changelog.commit.CommitStyle, Type[git_changelog.commit.CommitStyle]] DEFAULT: None Source code in git_changelog/build.py def __init__ ( # noqa: WPS231 self , repository : str , provider : Optional [ ProviderRefParser ] = None , style : StyleType = None , ): \"\"\" Initialization method. Arguments: repository: The repository (directory) for which to build the changelog. provider: The provider to use (github.com, gitlab.com, etc.). style: The commit style to use (angular, atom, etc.). \"\"\" self . repository : str = repository # set provider if not provider : remote_url = self . get_remote_url () split = remote_url . split ( \"/\" ) provider_url = \"/\" . join ( split [: 3 ]) namespace , project = \"/\" . join ( split [ 3 : - 1 ]), split [ - 1 ] if \"github\" in provider_url : provider = GitHub ( namespace , project , url = provider_url ) elif \"gitlab\" in provider_url : provider = GitLab ( namespace , project , url = provider_url ) self . remote_url : str = remote_url self . provider = provider # set style if isinstance ( style , str ): try : style = self . STYLE [ style ]() except KeyError : print ( f \"git-changelog: no such style available: { style } , using default style\" , file = sys . stderr ) style = BasicStyle () elif style is None : style = BasicStyle () elif not isinstance ( style , CommitStyle ) and issubclass ( style , CommitStyle ): style = style () self . style : CommitStyle = style # get git log and parse it into list of commits self . raw_log : str = self . get_log () self . commits : List [ Commit ] = self . parse_commits () # apply dates to commits and group them by version dates = self . apply_versions_to_commits () v_list , v_dict = self . group_commits_by_version ( dates ) self . versions_list = v_list self . versions_dict = v_dict # guess the next version number based on last version and recent commits last_version = self . versions_list [ 0 ] if not last_version . tag and last_version . previous_version : last_tag = last_version . previous_version . tag major = minor = False # noqa: WPS429 for commit in last_version . commits : if commit . style [ \"is_major\" ]: major = True break elif commit . style [ \"is_minor\" ]: minor = True if major : planned_tag = bump ( last_tag , \"major\" ) elif minor : planned_tag = bump ( last_tag , \"minor\" ) else : planned_tag = bump ( last_tag , \"patch\" ) last_version . planned_tag = planned_tag if self . provider : last_version . url = self . provider . get_tag_url ( tag = planned_tag ) last_version . compare_url = self . provider . get_compare_url ( base = last_version . previous_version . tag , target = last_version . planned_tag ) apply_versions_to_commits ( self ) \u00a4 Iterate on the commits to apply them a date. RETURNS A dictionary with versions as keys and dates as values. TYPE: Dict[str, datetime.date] Source code in git_changelog/build.py def apply_versions_to_commits ( self ) -> Dict [ str , datetime . date ]: \"\"\"Iterate on the commits to apply them a date. Returns: A dictionary with versions as keys and dates as values. \"\"\" versions_dates = { \"\" : datetime . date . today ()} version = None for commit in self . commits : if commit . version : version = commit . version versions_dates [ version ] = commit . committer_date . date () elif version : commit . version = version return versions_dates get_log ( self ) \u00a4 Get the git log output. RETURNS The output of the git log command, with a particular format. TYPE: str Source code in git_changelog/build.py def get_log ( self ) -> str : \"\"\"Get the `git log` output. Returns: The output of the `git log` command, with a particular format. \"\"\" return self . run_git ( \"log\" , \"--date=unix\" , \"--format=\" + self . FORMAT ) get_remote_url ( self ) \u00a4 Get the git remote URL for the repository. RETURNS The origin remote URL. TYPE: str Source code in git_changelog/build.py def get_remote_url ( self ) -> str : # noqa: WPS615 \"\"\"Get the git remote URL for the repository. Returns: The origin remote URL. \"\"\" git_url = self . run_git ( \"config\" , \"--get\" , \"remote.origin.url\" ) . rstrip ( \" \\n \" ) if git_url . startswith ( \"git@\" ): git_url = git_url . replace ( \":\" , \"/\" , 1 ) . replace ( \"git@\" , \"https://\" , 1 ) if git_url . endswith ( \".git\" ): git_url = git_url [: - 4 ] return git_url group_commits_by_version ( self , dates ) \u00a4 Iterate on commits to group them by version. PARAMETER DESCRIPTION dates A dictionary with versions as keys and their dates as values. TYPE: Dict[str, datetime.date] RETURNS A tuple containing the versions as a list and the versions as a dictionary. TYPE: Tuple[List[git_changelog.build.Version], Dict[str, git_changelog.build.Version]] Source code in git_changelog/build.py def group_commits_by_version ( # noqa: WPS231 self , dates : Dict [ str , datetime . date ] ) -> Tuple [ List [ Version ], Dict [ str , Version ]]: \"\"\"Iterate on commits to group them by version. Arguments: dates: A dictionary with versions as keys and their dates as values. Returns: A tuple containing the versions as a list and the versions as a dictionary. \"\"\" versions_list = [] versions_dict = {} versions_types_dict : Dict [ str , Dict [ str , Section ]] = {} next_version = None for commit in self . commits : if commit . version not in versions_dict : version = Version ( tag = commit . version , date = dates [ commit . version ]) versions_dict [ commit . version ] = version if self . provider : version . url = self . provider . get_tag_url ( tag = commit . version ) if next_version : version . next_version = next_version next_version . previous_version = version if self . provider : next_version . compare_url = self . provider . get_compare_url ( base = version . tag , target = next_version . tag or \"HEAD\" ) next_version = version versions_list . append ( version ) versions_types_dict [ commit . version ] = {} versions_dict [ commit . version ] . commits . append ( commit ) if \"type\" in commit . style and commit . style [ \"type\" ] not in versions_types_dict [ commit . version ]: section = Section ( section_type = commit . style [ \"type\" ]) versions_types_dict [ commit . version ][ commit . style [ \"type\" ]] = section versions_dict [ commit . version ] . sections_list . append ( section ) versions_dict [ commit . version ] . sections_dict = versions_types_dict [ commit . version ] versions_types_dict [ commit . version ][ commit . style [ \"type\" ]] . commits . append ( commit ) if next_version is not None and self . provider : next_version . compare_url = self . provider . get_compare_url ( base = versions_list [ - 1 ] . commits [ - 1 ] . hash , target = next_version . tag or \"HEAD\" ) return versions_list , versions_dict parse_commits ( self ) \u00a4 Parse the output of 'git log' into a list of commits. RETURNS The list of commits. TYPE: List[git_changelog.commit.Commit] Source code in git_changelog/build.py def parse_commits ( self ) -> List [ Commit ]: \"\"\"Parse the output of 'git log' into a list of commits. Returns: The list of commits. \"\"\" lines = self . raw_log . split ( \" \\n \" ) size = len ( lines ) - 1 # don't count last blank line commits = [] pos = 0 while pos < size : commit = Commit ( commit_hash = lines [ pos ], author_name = lines [ pos + 1 ], author_email = lines [ pos + 2 ], author_date = lines [ pos + 3 ], committer_name = lines [ pos + 4 ], committer_email = lines [ pos + 5 ], committer_date = lines [ pos + 6 ], refs = lines [ pos + 7 ], subject = lines [ pos + 8 ], body = [ lines [ pos + 9 ]], ) # append body lines nbl_index = 10 while lines [ pos + nbl_index ] != self . MARKER : commit . body . append ( lines [ pos + nbl_index ]) nbl_index += 1 pos += nbl_index + 1 # expand commit object with provider parsing if self . provider : commit . update_with_provider ( self . provider ) elif self . remote_url : # set the commit url based on remote_url (could be wrong) commit . url = self . remote_url + \"/commit/\" + commit . hash # expand commit object with style parsing if self . style : commit . update_with_style ( self . style ) commits . append ( commit ) return commits run_git ( self , * args ) \u00a4 Run a git command in the chosen repository. PARAMETER DESCRIPTION *args Arguments passed to the git command. TYPE: DEFAULT: () RETURNS The git command output. TYPE: str Source code in git_changelog/build.py def run_git ( self , * args ) -> str : \"\"\"Run a git command in the chosen repository. Arguments: *args: Arguments passed to the git command. Returns: The git command output. \"\"\" return check_output ([ \"git\" , * args ], cwd = self . repository ) . decode ( \"utf8\" ) # noqa: S603,S607 Section \u00a4 A list of commits grouped by section_type. __init__ ( self , section_type = '' , commits = None ) special \u00a4 Initialization method. PARAMETER DESCRIPTION section_type The section section_type. TYPE: str DEFAULT: '' commits The list of commits. TYPE: List[git_changelog.commit.Commit] DEFAULT: None Source code in git_changelog/build.py def __init__ ( self , section_type : str = \"\" , commits : List [ Commit ] = None ): \"\"\" Initialization method. Arguments: section_type: The section section_type. commits: The list of commits. \"\"\" self . type : str = section_type self . commits : List [ Commit ] = commits or [] Version \u00a4 A class to represent a changelog version. is_major : bool property readonly \u00a4 Tell if this version is a major one. RETURNS Whether this version is major. TYPE: bool is_minor : bool property readonly \u00a4 Tell if this version is a minor one. RETURNS Whether this version is minor. TYPE: bool typed_sections : List [ git_changelog . build . Section ] property readonly \u00a4 Return typed sections only. RETURNS The typed sections. TYPE: List[git_changelog.build.Section] untyped_section : Optional [ git_changelog . build . Section ] property readonly \u00a4 Return untyped section if any. RETURNS The untyped section if any. TYPE: Optional[git_changelog.build.Section] __init__ ( self , tag = '' , date = None , sections = None , commits = None , url = '' , compare_url = '' ) special \u00a4 Initialization method. PARAMETER DESCRIPTION tag The version tag. TYPE: str DEFAULT: '' date The version date. TYPE: Optional[datetime.date] DEFAULT: None sections The version sections. TYPE: List[git_changelog.build.Section] DEFAULT: None commits The version commits. TYPE: List[git_changelog.commit.Commit] DEFAULT: None url The version URL. TYPE: str DEFAULT: '' compare_url The version 'compare' URL. TYPE: str DEFAULT: '' Source code in git_changelog/build.py def __init__ ( self , tag : str = \"\" , date : Optional [ datetime . date ] = None , sections : List [ Section ] = None , commits : List [ Commit ] = None , url : str = \"\" , compare_url : str = \"\" , ): \"\"\" Initialization method. Arguments: tag: The version tag. date: The version date. sections: The version sections. commits: The version commits. url: The version URL. compare_url: The version 'compare' URL. \"\"\" self . tag = tag self . date = date self . sections_list : List [ Section ] = sections or [] self . sections_dict : Dict [ str , Section ] = { section . type : section for section in self . sections_list } self . commits : List [ Commit ] = commits or [] self . url : str = url self . compare_url : str = compare_url self . previous_version : Union [ Version , None ] = None self . next_version : Union [ Version , None ] = None self . planned_tag : Optional [ str ] = None bump ( version , part = 'patch' ) \u00a4 Bump a version. PARAMETER DESCRIPTION version The version to bump. TYPE: str part The part of the version to bump (major, minor, or patch). TYPE: str DEFAULT: 'patch' RETURNS The bumped version. TYPE: str Source code in git_changelog/build.py def bump ( version : str , part : str = \"patch\" ) -> str : # noqa: WPS231 \"\"\" Bump a version. Arguments: version: The version to bump. part: The part of the version to bump (major, minor, or patch). Returns: The bumped version. \"\"\" prefix = \"\" if version [ 0 ] == \"v\" : prefix = \"v\" version = version [ 1 :] semver_version = VersionInfo . parse ( version ) if part == \"major\" and semver_version . major != 0 : semver_version = semver_version . bump_major () elif part == \"minor\" or ( part == \"major\" and semver_version . major == 0 ): semver_version = semver_version . bump_minor () elif part == \"patch\" and not semver_version . prerelease : semver_version = semver_version . bump_patch () return prefix + str ( semver_version )","title":"build.py"},{"location":"reference/build/#git_changelog.build.Changelog","text":"The main changelog class.","title":"Changelog"},{"location":"reference/build/#git_changelog.build.Changelog.__init__","text":"Initialization method. PARAMETER DESCRIPTION repository The repository (directory) for which to build the changelog. TYPE: str provider The provider to use (github.com, gitlab.com, etc.). TYPE: Optional[git_changelog.providers.ProviderRefParser] DEFAULT: None style The commit style to use (angular, atom, etc.). TYPE: Union[str, git_changelog.commit.CommitStyle, Type[git_changelog.commit.CommitStyle]] DEFAULT: None Source code in git_changelog/build.py def __init__ ( # noqa: WPS231 self , repository : str , provider : Optional [ ProviderRefParser ] = None , style : StyleType = None , ): \"\"\" Initialization method. Arguments: repository: The repository (directory) for which to build the changelog. provider: The provider to use (github.com, gitlab.com, etc.). style: The commit style to use (angular, atom, etc.). \"\"\" self . repository : str = repository # set provider if not provider : remote_url = self . get_remote_url () split = remote_url . split ( \"/\" ) provider_url = \"/\" . join ( split [: 3 ]) namespace , project = \"/\" . join ( split [ 3 : - 1 ]), split [ - 1 ] if \"github\" in provider_url : provider = GitHub ( namespace , project , url = provider_url ) elif \"gitlab\" in provider_url : provider = GitLab ( namespace , project , url = provider_url ) self . remote_url : str = remote_url self . provider = provider # set style if isinstance ( style , str ): try : style = self . STYLE [ style ]() except KeyError : print ( f \"git-changelog: no such style available: { style } , using default style\" , file = sys . stderr ) style = BasicStyle () elif style is None : style = BasicStyle () elif not isinstance ( style , CommitStyle ) and issubclass ( style , CommitStyle ): style = style () self . style : CommitStyle = style # get git log and parse it into list of commits self . raw_log : str = self . get_log () self . commits : List [ Commit ] = self . parse_commits () # apply dates to commits and group them by version dates = self . apply_versions_to_commits () v_list , v_dict = self . group_commits_by_version ( dates ) self . versions_list = v_list self . versions_dict = v_dict # guess the next version number based on last version and recent commits last_version = self . versions_list [ 0 ] if not last_version . tag and last_version . previous_version : last_tag = last_version . previous_version . tag major = minor = False # noqa: WPS429 for commit in last_version . commits : if commit . style [ \"is_major\" ]: major = True break elif commit . style [ \"is_minor\" ]: minor = True if major : planned_tag = bump ( last_tag , \"major\" ) elif minor : planned_tag = bump ( last_tag , \"minor\" ) else : planned_tag = bump ( last_tag , \"patch\" ) last_version . planned_tag = planned_tag if self . provider : last_version . url = self . provider . get_tag_url ( tag = planned_tag ) last_version . compare_url = self . provider . get_compare_url ( base = last_version . previous_version . tag , target = last_version . planned_tag )","title":"__init__()"},{"location":"reference/build/#git_changelog.build.Changelog.apply_versions_to_commits","text":"Iterate on the commits to apply them a date. RETURNS A dictionary with versions as keys and dates as values. TYPE: Dict[str, datetime.date] Source code in git_changelog/build.py def apply_versions_to_commits ( self ) -> Dict [ str , datetime . date ]: \"\"\"Iterate on the commits to apply them a date. Returns: A dictionary with versions as keys and dates as values. \"\"\" versions_dates = { \"\" : datetime . date . today ()} version = None for commit in self . commits : if commit . version : version = commit . version versions_dates [ version ] = commit . committer_date . date () elif version : commit . version = version return versions_dates","title":"apply_versions_to_commits()"},{"location":"reference/build/#git_changelog.build.Changelog.get_log","text":"Get the git log output. RETURNS The output of the git log command, with a particular format. TYPE: str Source code in git_changelog/build.py def get_log ( self ) -> str : \"\"\"Get the `git log` output. Returns: The output of the `git log` command, with a particular format. \"\"\" return self . run_git ( \"log\" , \"--date=unix\" , \"--format=\" + self . FORMAT )","title":"get_log()"},{"location":"reference/build/#git_changelog.build.Changelog.get_remote_url","text":"Get the git remote URL for the repository. RETURNS The origin remote URL. TYPE: str Source code in git_changelog/build.py def get_remote_url ( self ) -> str : # noqa: WPS615 \"\"\"Get the git remote URL for the repository. Returns: The origin remote URL. \"\"\" git_url = self . run_git ( \"config\" , \"--get\" , \"remote.origin.url\" ) . rstrip ( \" \\n \" ) if git_url . startswith ( \"git@\" ): git_url = git_url . replace ( \":\" , \"/\" , 1 ) . replace ( \"git@\" , \"https://\" , 1 ) if git_url . endswith ( \".git\" ): git_url = git_url [: - 4 ] return git_url","title":"get_remote_url()"},{"location":"reference/build/#git_changelog.build.Changelog.group_commits_by_version","text":"Iterate on commits to group them by version. PARAMETER DESCRIPTION dates A dictionary with versions as keys and their dates as values. TYPE: Dict[str, datetime.date] RETURNS A tuple containing the versions as a list and the versions as a dictionary. TYPE: Tuple[List[git_changelog.build.Version], Dict[str, git_changelog.build.Version]] Source code in git_changelog/build.py def group_commits_by_version ( # noqa: WPS231 self , dates : Dict [ str , datetime . date ] ) -> Tuple [ List [ Version ], Dict [ str , Version ]]: \"\"\"Iterate on commits to group them by version. Arguments: dates: A dictionary with versions as keys and their dates as values. Returns: A tuple containing the versions as a list and the versions as a dictionary. \"\"\" versions_list = [] versions_dict = {} versions_types_dict : Dict [ str , Dict [ str , Section ]] = {} next_version = None for commit in self . commits : if commit . version not in versions_dict : version = Version ( tag = commit . version , date = dates [ commit . version ]) versions_dict [ commit . version ] = version if self . provider : version . url = self . provider . get_tag_url ( tag = commit . version ) if next_version : version . next_version = next_version next_version . previous_version = version if self . provider : next_version . compare_url = self . provider . get_compare_url ( base = version . tag , target = next_version . tag or \"HEAD\" ) next_version = version versions_list . append ( version ) versions_types_dict [ commit . version ] = {} versions_dict [ commit . version ] . commits . append ( commit ) if \"type\" in commit . style and commit . style [ \"type\" ] not in versions_types_dict [ commit . version ]: section = Section ( section_type = commit . style [ \"type\" ]) versions_types_dict [ commit . version ][ commit . style [ \"type\" ]] = section versions_dict [ commit . version ] . sections_list . append ( section ) versions_dict [ commit . version ] . sections_dict = versions_types_dict [ commit . version ] versions_types_dict [ commit . version ][ commit . style [ \"type\" ]] . commits . append ( commit ) if next_version is not None and self . provider : next_version . compare_url = self . provider . get_compare_url ( base = versions_list [ - 1 ] . commits [ - 1 ] . hash , target = next_version . tag or \"HEAD\" ) return versions_list , versions_dict","title":"group_commits_by_version()"},{"location":"reference/build/#git_changelog.build.Changelog.parse_commits","text":"Parse the output of 'git log' into a list of commits. RETURNS The list of commits. TYPE: List[git_changelog.commit.Commit] Source code in git_changelog/build.py def parse_commits ( self ) -> List [ Commit ]: \"\"\"Parse the output of 'git log' into a list of commits. Returns: The list of commits. \"\"\" lines = self . raw_log . split ( \" \\n \" ) size = len ( lines ) - 1 # don't count last blank line commits = [] pos = 0 while pos < size : commit = Commit ( commit_hash = lines [ pos ], author_name = lines [ pos + 1 ], author_email = lines [ pos + 2 ], author_date = lines [ pos + 3 ], committer_name = lines [ pos + 4 ], committer_email = lines [ pos + 5 ], committer_date = lines [ pos + 6 ], refs = lines [ pos + 7 ], subject = lines [ pos + 8 ], body = [ lines [ pos + 9 ]], ) # append body lines nbl_index = 10 while lines [ pos + nbl_index ] != self . MARKER : commit . body . append ( lines [ pos + nbl_index ]) nbl_index += 1 pos += nbl_index + 1 # expand commit object with provider parsing if self . provider : commit . update_with_provider ( self . provider ) elif self . remote_url : # set the commit url based on remote_url (could be wrong) commit . url = self . remote_url + \"/commit/\" + commit . hash # expand commit object with style parsing if self . style : commit . update_with_style ( self . style ) commits . append ( commit ) return commits","title":"parse_commits()"},{"location":"reference/build/#git_changelog.build.Changelog.run_git","text":"Run a git command in the chosen repository. PARAMETER DESCRIPTION *args Arguments passed to the git command. TYPE: DEFAULT: () RETURNS The git command output. TYPE: str Source code in git_changelog/build.py def run_git ( self , * args ) -> str : \"\"\"Run a git command in the chosen repository. Arguments: *args: Arguments passed to the git command. Returns: The git command output. \"\"\" return check_output ([ \"git\" , * args ], cwd = self . repository ) . decode ( \"utf8\" ) # noqa: S603,S607","title":"run_git()"},{"location":"reference/build/#git_changelog.build.Section","text":"A list of commits grouped by section_type.","title":"Section"},{"location":"reference/build/#git_changelog.build.Section.__init__","text":"Initialization method. PARAMETER DESCRIPTION section_type The section section_type. TYPE: str DEFAULT: '' commits The list of commits. TYPE: List[git_changelog.commit.Commit] DEFAULT: None Source code in git_changelog/build.py def __init__ ( self , section_type : str = \"\" , commits : List [ Commit ] = None ): \"\"\" Initialization method. Arguments: section_type: The section section_type. commits: The list of commits. \"\"\" self . type : str = section_type self . commits : List [ Commit ] = commits or []","title":"__init__()"},{"location":"reference/build/#git_changelog.build.Version","text":"A class to represent a changelog version.","title":"Version"},{"location":"reference/build/#git_changelog.build.Version.is_major","text":"Tell if this version is a major one. RETURNS Whether this version is major. TYPE: bool","title":"is_major"},{"location":"reference/build/#git_changelog.build.Version.is_minor","text":"Tell if this version is a minor one. RETURNS Whether this version is minor. TYPE: bool","title":"is_minor"},{"location":"reference/build/#git_changelog.build.Version.typed_sections","text":"Return typed sections only. RETURNS The typed sections. TYPE: List[git_changelog.build.Section]","title":"typed_sections"},{"location":"reference/build/#git_changelog.build.Version.untyped_section","text":"Return untyped section if any. RETURNS The untyped section if any. TYPE: Optional[git_changelog.build.Section]","title":"untyped_section"},{"location":"reference/build/#git_changelog.build.Version.__init__","text":"Initialization method. PARAMETER DESCRIPTION tag The version tag. TYPE: str DEFAULT: '' date The version date. TYPE: Optional[datetime.date] DEFAULT: None sections The version sections. TYPE: List[git_changelog.build.Section] DEFAULT: None commits The version commits. TYPE: List[git_changelog.commit.Commit] DEFAULT: None url The version URL. TYPE: str DEFAULT: '' compare_url The version 'compare' URL. TYPE: str DEFAULT: '' Source code in git_changelog/build.py def __init__ ( self , tag : str = \"\" , date : Optional [ datetime . date ] = None , sections : List [ Section ] = None , commits : List [ Commit ] = None , url : str = \"\" , compare_url : str = \"\" , ): \"\"\" Initialization method. Arguments: tag: The version tag. date: The version date. sections: The version sections. commits: The version commits. url: The version URL. compare_url: The version 'compare' URL. \"\"\" self . tag = tag self . date = date self . sections_list : List [ Section ] = sections or [] self . sections_dict : Dict [ str , Section ] = { section . type : section for section in self . sections_list } self . commits : List [ Commit ] = commits or [] self . url : str = url self . compare_url : str = compare_url self . previous_version : Union [ Version , None ] = None self . next_version : Union [ Version , None ] = None self . planned_tag : Optional [ str ] = None","title":"__init__()"},{"location":"reference/build/#git_changelog.build.bump","text":"Bump a version. PARAMETER DESCRIPTION version The version to bump. TYPE: str part The part of the version to bump (major, minor, or patch). TYPE: str DEFAULT: 'patch' RETURNS The bumped version. TYPE: str Source code in git_changelog/build.py def bump ( version : str , part : str = \"patch\" ) -> str : # noqa: WPS231 \"\"\" Bump a version. Arguments: version: The version to bump. part: The part of the version to bump (major, minor, or patch). Returns: The bumped version. \"\"\" prefix = \"\" if version [ 0 ] == \"v\" : prefix = \"v\" version = version [ 1 :] semver_version = VersionInfo . parse ( version ) if part == \"major\" and semver_version . major != 0 : semver_version = semver_version . bump_major () elif part == \"minor\" or ( part == \"major\" and semver_version . major == 0 ): semver_version = semver_version . bump_minor () elif part == \"patch\" and not semver_version . prerelease : semver_version = semver_version . bump_patch () return prefix + str ( semver_version )","title":"bump()"},{"location":"reference/cli/","text":"Module that contains the command line application. Templates ( tuple ) \u00a4 Helper to pick a template on the command line. get_parser () \u00a4 Return the CLI argument parser. RETURNS An argparse parser. TYPE: ArgumentParser Source code in git_changelog/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" parser = argparse . ArgumentParser ( add_help = False , prog = \"git-changelog\" , description = \"Command line tool for git-changelog Python package.\" ) parser . add_argument ( \"repository\" , metavar = \"REPOSITORY\" , help = \"The repository path, relative or absolute.\" ) parser . add_argument ( \"-h\" , \"--help\" , action = \"help\" , default = argparse . SUPPRESS , help = \"Show this help message and exit.\" ) parser . add_argument ( \"-o\" , \"--output\" , action = \"store\" , dest = \"output\" , default = sys . stdout , help = \"Output to given file. Default: stdout.\" , ) parser . add_argument ( \"-s\" , \"--style\" , choices = STYLES , default = \"basic\" , dest = \"style\" , help = \"The commit style to match against.\" ) parser . add_argument ( \"-t\" , \"--template\" , choices = Templates (( \"angular\" , \"keepachangelog\" )), default = \"keepachangelog\" , dest = \"template\" , help = 'The Jinja2 template to use. Prefix with \"path:\" to specify the path ' 'to a directory containing a file named \"changelog.md\".' , ) parser . add_argument ( \"-v\" , \"--version\" , action = \"version\" , version = \" %(prog)s \" + get_version (), # noqa: WPS323 (%) help = \"Show the current version of the program and exit.\" , ) return parser get_version () \u00a4 Return the current git-changelog version. RETURNS The current git-changelog version. TYPE: str Source code in git_changelog/cli.py def get_version () -> str : \"\"\" Return the current `git-changelog` version. Returns: The current `git-changelog` version. \"\"\" try : distribution = pkg_resources . get_distribution ( \"git-changelog\" ) except pkg_resources . DistributionNotFound : return \"0.0.0\" return distribution . version main ( args = None ) \u00a4 Run the main program. This function is executed when you type git-changelog or python -m git_changelog . PARAMETER DESCRIPTION args Arguments passed from the command line. TYPE: Optional[List[str]] DEFAULT: None RETURNS An exit code. TYPE: int Source code in git_changelog/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `git-changelog` or `python -m git_changelog`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) # get template if opts . template . startswith ( \"path:\" ): path = opts . template . replace ( \"path:\" , \"\" , 1 ) try : template = templates . get_custom_template ( path ) except TemplateNotFound : print ( f \"git-changelog: no such directory, or missing changelog.md: { path } \" , file = sys . stderr ) return 1 else : template = templates . get_template ( opts . template ) # build data changelog = Changelog ( opts . repository , style = opts . style ) # get rendered contents rendered = template . render ( changelog = changelog ) # write result in specified output if opts . output is sys . stdout : sys . stdout . write ( rendered ) else : with open ( opts . output , \"w\" ) as stream : stream . write ( rendered ) return 0","title":"cli.py"},{"location":"reference/cli/#git_changelog.cli.Templates","text":"Helper to pick a template on the command line.","title":"Templates"},{"location":"reference/cli/#git_changelog.cli.get_parser","text":"Return the CLI argument parser. RETURNS An argparse parser. TYPE: ArgumentParser Source code in git_changelog/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" parser = argparse . ArgumentParser ( add_help = False , prog = \"git-changelog\" , description = \"Command line tool for git-changelog Python package.\" ) parser . add_argument ( \"repository\" , metavar = \"REPOSITORY\" , help = \"The repository path, relative or absolute.\" ) parser . add_argument ( \"-h\" , \"--help\" , action = \"help\" , default = argparse . SUPPRESS , help = \"Show this help message and exit.\" ) parser . add_argument ( \"-o\" , \"--output\" , action = \"store\" , dest = \"output\" , default = sys . stdout , help = \"Output to given file. Default: stdout.\" , ) parser . add_argument ( \"-s\" , \"--style\" , choices = STYLES , default = \"basic\" , dest = \"style\" , help = \"The commit style to match against.\" ) parser . add_argument ( \"-t\" , \"--template\" , choices = Templates (( \"angular\" , \"keepachangelog\" )), default = \"keepachangelog\" , dest = \"template\" , help = 'The Jinja2 template to use. Prefix with \"path:\" to specify the path ' 'to a directory containing a file named \"changelog.md\".' , ) parser . add_argument ( \"-v\" , \"--version\" , action = \"version\" , version = \" %(prog)s \" + get_version (), # noqa: WPS323 (%) help = \"Show the current version of the program and exit.\" , ) return parser","title":"get_parser()"},{"location":"reference/cli/#git_changelog.cli.get_version","text":"Return the current git-changelog version. RETURNS The current git-changelog version. TYPE: str Source code in git_changelog/cli.py def get_version () -> str : \"\"\" Return the current `git-changelog` version. Returns: The current `git-changelog` version. \"\"\" try : distribution = pkg_resources . get_distribution ( \"git-changelog\" ) except pkg_resources . DistributionNotFound : return \"0.0.0\" return distribution . version","title":"get_version()"},{"location":"reference/cli/#git_changelog.cli.main","text":"Run the main program. This function is executed when you type git-changelog or python -m git_changelog . PARAMETER DESCRIPTION args Arguments passed from the command line. TYPE: Optional[List[str]] DEFAULT: None RETURNS An exit code. TYPE: int Source code in git_changelog/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `git-changelog` or `python -m git_changelog`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) # get template if opts . template . startswith ( \"path:\" ): path = opts . template . replace ( \"path:\" , \"\" , 1 ) try : template = templates . get_custom_template ( path ) except TemplateNotFound : print ( f \"git-changelog: no such directory, or missing changelog.md: { path } \" , file = sys . stderr ) return 1 else : template = templates . get_template ( opts . template ) # build data changelog = Changelog ( opts . repository , style = opts . style ) # get rendered contents rendered = template . render ( changelog = changelog ) # write result in specified output if opts . output is sys . stdout : sys . stdout . write ( rendered ) else : with open ( opts . output , \"w\" ) as stream : stream . write ( rendered ) return 0","title":"main()"},{"location":"reference/commit/","text":"Module containing the commit logic. AngularStyle ( CommitStyle ) \u00a4 Angular commit message style. is_major ( self , commit_message ) \u00a4 Tell if this commit is worth a major bump. PARAMETER DESCRIPTION commit_message The commit message. TYPE: str RETURNS Whether it's a major commit. TYPE: bool Source code in git_changelog/commit.py def is_major ( self , commit_message : str ) -> bool : \"\"\"Tell if this commit is worth a major bump. Arguments: commit_message: The commit message. Returns: Whether it's a major commit. \"\"\" return bool ( self . BREAK_REGEX . search ( commit_message )) is_minor ( self , commit_type ) \u00a4 Tell if this commit is worth a minor bump. PARAMETER DESCRIPTION commit_type The commit type. TYPE: str RETURNS Whether it's a minor commit. TYPE: bool Source code in git_changelog/commit.py def is_minor ( self , commit_type : str ) -> bool : \"\"\"Tell if this commit is worth a minor bump. Arguments: commit_type: The commit type. Returns: Whether it's a minor commit. \"\"\" return commit_type == self . TYPES [ \"feat\" ] parse_commit ( self , commit ) \u00a4 Parse the commit to extract information. PARAMETER DESCRIPTION commit The commit to parse. TYPE: Commit RETURNS A dictionary containing the parsed data. TYPE: Dict[str, Union[str, bool]] Source code in git_changelog/commit.py def parse_commit ( self , commit : Commit ) -> Dict [ str , Union [ str , bool ]]: # noqa: D102 (use parent docstring) subject = self . parse_subject ( commit . subject ) message = \" \\n \" . join ([ commit . subject ] + commit . body ) is_major = self . is_major ( message ) is_minor = not is_major and self . is_minor ( subject [ \"type\" ]) is_patch = not any (( is_major , is_minor )) return { \"type\" : subject [ \"type\" ], \"scope\" : subject [ \"scope\" ], \"subject\" : subject [ \"subject\" ], \"is_major\" : is_major , \"is_minor\" : is_minor , \"is_patch\" : is_patch , } parse_subject ( self , commit_subject ) \u00a4 Parse the subject of the commit ( <type>[(scope)]: Subject ). PARAMETER DESCRIPTION commit_subject The commit message subject. TYPE: str RETURNS The parsed data. TYPE: Dict[str, str] Source code in git_changelog/commit.py def parse_subject ( self , commit_subject : str ) -> Dict [ str , str ]: \"\"\"Parse the subject of the commit (`<type>[(scope)]: Subject`). Arguments: commit_subject: The commit message subject. Returns: The parsed data. \"\"\" subject_match = self . SUBJECT_REGEX . match ( commit_subject ) if subject_match : dct = subject_match . groupdict () dct [ \"type\" ] = self . TYPES [ dct [ \"type\" ]] return dct return { \"type\" : \"\" , \"scope\" : \"\" , \"subject\" : commit_subject } AtomStyle ( CommitStyle ) \u00a4 Atom commit message style. BasicStyle ( CommitStyle ) \u00a4 Basic commit message style. is_major ( self , commit_message ) \u00a4 Tell if this commit is worth a major bump. PARAMETER DESCRIPTION commit_message The commit message. TYPE: str RETURNS Whether it's a major commit. TYPE: bool Source code in git_changelog/commit.py def is_major ( self , commit_message : str ) -> bool : \"\"\"Tell if this commit is worth a major bump. Arguments: commit_message: The commit message. Returns: Whether it's a major commit. \"\"\" return bool ( self . BREAK_REGEX . search ( commit_message )) is_minor ( self , commit_type ) \u00a4 Tell if this commit is worth a minor bump. PARAMETER DESCRIPTION commit_type The commit type. TYPE: str RETURNS Whether it's a minor commit. TYPE: bool Source code in git_changelog/commit.py def is_minor ( self , commit_type : str ) -> bool : \"\"\"Tell if this commit is worth a minor bump. Arguments: commit_type: The commit type. Returns: Whether it's a minor commit. \"\"\" return commit_type == self . TYPES [ \"add\" ] parse_commit ( self , commit ) \u00a4 Parse the commit to extract information. PARAMETER DESCRIPTION commit The commit to parse. TYPE: Commit RETURNS A dictionary containing the parsed data. TYPE: Dict[str, Union[str, bool]] Source code in git_changelog/commit.py def parse_commit ( self , commit : Commit ) -> Dict [ str , Union [ str , bool ]]: # noqa: D102 (use parent docstring) commit_type = self . parse_type ( commit . subject ) message = \" \\n \" . join ([ commit . subject ] + commit . body ) is_major = self . is_major ( message ) is_minor = not is_major and self . is_minor ( commit_type ) is_patch = not any (( is_major , is_minor )) return { \"type\" : commit_type , \"is_major\" : is_major , \"is_minor\" : is_minor , \"is_patch\" : is_patch } parse_type ( self , commit_subject ) \u00a4 Parse the type of the commit given its subject. PARAMETER DESCRIPTION commit_subject The commit message subject. TYPE: str RETURNS The commit type. TYPE: str Source code in git_changelog/commit.py def parse_type ( self , commit_subject : str ) -> str : \"\"\"Parse the type of the commit given its subject. Arguments: commit_subject: The commit message subject. Returns: The commit type. \"\"\" type_match = self . TYPE_REGEX . match ( commit_subject ) if type_match : return self . TYPES . get ( type_match . groupdict ()[ \"type\" ] . lower (), \"\" ) return \"\" Commit \u00a4 A class to represent a commit. __init__ ( self , commit_hash , author_name = '' , author_email = '' , author_date = '' , committer_name = '' , committer_email = '' , committer_date = '' , refs = '' , subject = '' , body = None , url = '' ) special \u00a4 Initialization method. PARAMETER DESCRIPTION commit_hash The commit hash. TYPE: str author_name The author name. TYPE: str DEFAULT: '' author_email The author email. TYPE: str DEFAULT: '' author_date The authoring date. TYPE: str DEFAULT: '' committer_name The committer name. TYPE: str DEFAULT: '' committer_email The committer email. TYPE: str DEFAULT: '' committer_date The committing date. TYPE: str DEFAULT: '' refs The commit refs. TYPE: str DEFAULT: '' subject The commit message subject. TYPE: str DEFAULT: '' body The commit message body. TYPE: List[str] DEFAULT: None url The commit URL. TYPE: str DEFAULT: '' Source code in git_changelog/commit.py def __init__ ( self , commit_hash : str , author_name : str = \"\" , author_email : str = \"\" , author_date : str = \"\" , committer_name : str = \"\" , committer_email : str = \"\" , committer_date : str = \"\" , refs : str = \"\" , subject : str = \"\" , body : List [ str ] = None , url : str = \"\" , ): \"\"\" Initialization method. Arguments: commit_hash: The commit hash. author_name: The author name. author_email: The author email. author_date: The authoring date. committer_name: The committer name. committer_email: The committer email. committer_date: The committing date. refs: The commit refs. subject: The commit message subject. body: The commit message body. url: The commit URL. \"\"\" self . hash : str = commit_hash self . author_name : str = author_name self . author_email : str = author_email self . author_date : datetime = datetime . utcfromtimestamp ( float ( author_date )) self . committer_name : str = committer_name self . committer_email : str = committer_email self . committer_date : datetime = datetime . utcfromtimestamp ( float ( committer_date )) self . subject : str = subject self . body : List [ str ] = body or [] self . url : str = url tag = \"\" for ref in refs . split ( \",\" ): ref = ref . strip () if ref . startswith ( \"tag: \" ): tag = ref . replace ( \"tag: \" , \"\" ) break self . tag : str = tag self . version : str = tag self . text_refs : Dict [ str , List [ Ref ]] = {} self . style : Dict [ str , Any ] = {} update_with_provider ( self , provider ) \u00a4 Apply the provider-parsed data to this commit. PARAMETER DESCRIPTION provider The provider to use. TYPE: ProviderRefParser Source code in git_changelog/commit.py def update_with_provider ( self , provider : ProviderRefParser ) -> None : \"\"\" Apply the provider-parsed data to this commit. Arguments: provider: The provider to use. \"\"\" # set the commit url based on provider # FIXME: hardcoded 'commits' if \"commits\" in provider . REF : self . url = provider . build_ref_url ( \"commits\" , { \"ref\" : self . hash }) else : # use default \"commit\" url (could be wrong) self . url = f \" { provider . url } / { provider . namespace } / { provider . project } /commit/ { self . hash } \" # build commit text references from its subject and body for ref_type in provider . REF . keys (): self . text_refs [ ref_type ] = provider . get_refs ( ref_type , \" \\n \" . join ([ self . subject ] + self . body )) if \"issues\" in self . text_refs : self . text_refs [ \"issues_not_in_subject\" ] = [] for issue in self . text_refs [ \"issues\" ]: if issue . ref not in self . subject : self . text_refs [ \"issues_not_in_subject\" ] . append ( issue ) update_with_style ( self , style ) \u00a4 Apply the style-parsed data to this commit. PARAMETER DESCRIPTION style The style to use. TYPE: CommitStyle Source code in git_changelog/commit.py def update_with_style ( self , style : \"CommitStyle\" ) -> None : \"\"\" Apply the style-parsed data to this commit. Arguments: style: The style to use. \"\"\" self . style . update ( style . parse_commit ( self )) CommitStyle ( ABC ) \u00a4 A base class for a style of commit messages. parse_commit ( self , commit ) \u00a4 Parse the commit to extract information. PARAMETER DESCRIPTION commit The commit to parse. TYPE: Commit RETURNS A dictionary containing the parsed data. TYPE: Dict[str, Union[str, bool]] Source code in git_changelog/commit.py @abstractmethod def parse_commit ( self , commit : Commit ) -> Dict [ str , Union [ str , bool ]]: \"\"\" Parse the commit to extract information. Arguments: commit: The commit to parse. Returns: A dictionary containing the parsed data. \"\"\" # noqa: DAR202,DAR401 raise NotImplementedError ConventionalCommitStyle ( AngularStyle ) \u00a4 Conventional commit message style. parse_commit ( self , commit ) \u00a4 Parse the commit to extract information. PARAMETER DESCRIPTION commit The commit to parse. TYPE: Commit RETURNS A dictionary containing the parsed data. TYPE: Dict[str, Union[str, bool]] Source code in git_changelog/commit.py def parse_commit ( self , commit : Commit ) -> Dict [ str , Union [ str , bool ]]: # noqa: D102 (use parent docstring) subject = self . parse_subject ( commit . subject ) message = \" \\n \" . join ([ commit . subject ] + commit . body ) is_major = self . is_major ( message ) or subject . get ( \"breaking\" ) == \"!\" is_minor = not is_major and self . is_minor ( subject [ \"type\" ]) is_patch = not any (( is_major , is_minor )) return { \"type\" : subject [ \"type\" ], \"scope\" : subject [ \"scope\" ], \"subject\" : subject [ \"subject\" ], \"is_major\" : is_major , \"is_minor\" : is_minor , \"is_patch\" : is_patch , }","title":"commit.py"},{"location":"reference/commit/#git_changelog.commit.AngularStyle","text":"Angular commit message style.","title":"AngularStyle"},{"location":"reference/commit/#git_changelog.commit.AngularStyle.is_major","text":"Tell if this commit is worth a major bump. PARAMETER DESCRIPTION commit_message The commit message. TYPE: str RETURNS Whether it's a major commit. TYPE: bool Source code in git_changelog/commit.py def is_major ( self , commit_message : str ) -> bool : \"\"\"Tell if this commit is worth a major bump. Arguments: commit_message: The commit message. Returns: Whether it's a major commit. \"\"\" return bool ( self . BREAK_REGEX . search ( commit_message ))","title":"is_major()"},{"location":"reference/commit/#git_changelog.commit.AngularStyle.is_minor","text":"Tell if this commit is worth a minor bump. PARAMETER DESCRIPTION commit_type The commit type. TYPE: str RETURNS Whether it's a minor commit. TYPE: bool Source code in git_changelog/commit.py def is_minor ( self , commit_type : str ) -> bool : \"\"\"Tell if this commit is worth a minor bump. Arguments: commit_type: The commit type. Returns: Whether it's a minor commit. \"\"\" return commit_type == self . TYPES [ \"feat\" ]","title":"is_minor()"},{"location":"reference/commit/#git_changelog.commit.AngularStyle.parse_commit","text":"Parse the commit to extract information. PARAMETER DESCRIPTION commit The commit to parse. TYPE: Commit RETURNS A dictionary containing the parsed data. TYPE: Dict[str, Union[str, bool]] Source code in git_changelog/commit.py def parse_commit ( self , commit : Commit ) -> Dict [ str , Union [ str , bool ]]: # noqa: D102 (use parent docstring) subject = self . parse_subject ( commit . subject ) message = \" \\n \" . join ([ commit . subject ] + commit . body ) is_major = self . is_major ( message ) is_minor = not is_major and self . is_minor ( subject [ \"type\" ]) is_patch = not any (( is_major , is_minor )) return { \"type\" : subject [ \"type\" ], \"scope\" : subject [ \"scope\" ], \"subject\" : subject [ \"subject\" ], \"is_major\" : is_major , \"is_minor\" : is_minor , \"is_patch\" : is_patch , }","title":"parse_commit()"},{"location":"reference/commit/#git_changelog.commit.AngularStyle.parse_subject","text":"Parse the subject of the commit ( <type>[(scope)]: Subject ). PARAMETER DESCRIPTION commit_subject The commit message subject. TYPE: str RETURNS The parsed data. TYPE: Dict[str, str] Source code in git_changelog/commit.py def parse_subject ( self , commit_subject : str ) -> Dict [ str , str ]: \"\"\"Parse the subject of the commit (`<type>[(scope)]: Subject`). Arguments: commit_subject: The commit message subject. Returns: The parsed data. \"\"\" subject_match = self . SUBJECT_REGEX . match ( commit_subject ) if subject_match : dct = subject_match . groupdict () dct [ \"type\" ] = self . TYPES [ dct [ \"type\" ]] return dct return { \"type\" : \"\" , \"scope\" : \"\" , \"subject\" : commit_subject }","title":"parse_subject()"},{"location":"reference/commit/#git_changelog.commit.AtomStyle","text":"Atom commit message style.","title":"AtomStyle"},{"location":"reference/commit/#git_changelog.commit.BasicStyle","text":"Basic commit message style.","title":"BasicStyle"},{"location":"reference/commit/#git_changelog.commit.BasicStyle.is_major","text":"Tell if this commit is worth a major bump. PARAMETER DESCRIPTION commit_message The commit message. TYPE: str RETURNS Whether it's a major commit. TYPE: bool Source code in git_changelog/commit.py def is_major ( self , commit_message : str ) -> bool : \"\"\"Tell if this commit is worth a major bump. Arguments: commit_message: The commit message. Returns: Whether it's a major commit. \"\"\" return bool ( self . BREAK_REGEX . search ( commit_message ))","title":"is_major()"},{"location":"reference/commit/#git_changelog.commit.BasicStyle.is_minor","text":"Tell if this commit is worth a minor bump. PARAMETER DESCRIPTION commit_type The commit type. TYPE: str RETURNS Whether it's a minor commit. TYPE: bool Source code in git_changelog/commit.py def is_minor ( self , commit_type : str ) -> bool : \"\"\"Tell if this commit is worth a minor bump. Arguments: commit_type: The commit type. Returns: Whether it's a minor commit. \"\"\" return commit_type == self . TYPES [ \"add\" ]","title":"is_minor()"},{"location":"reference/commit/#git_changelog.commit.BasicStyle.parse_commit","text":"Parse the commit to extract information. PARAMETER DESCRIPTION commit The commit to parse. TYPE: Commit RETURNS A dictionary containing the parsed data. TYPE: Dict[str, Union[str, bool]] Source code in git_changelog/commit.py def parse_commit ( self , commit : Commit ) -> Dict [ str , Union [ str , bool ]]: # noqa: D102 (use parent docstring) commit_type = self . parse_type ( commit . subject ) message = \" \\n \" . join ([ commit . subject ] + commit . body ) is_major = self . is_major ( message ) is_minor = not is_major and self . is_minor ( commit_type ) is_patch = not any (( is_major , is_minor )) return { \"type\" : commit_type , \"is_major\" : is_major , \"is_minor\" : is_minor , \"is_patch\" : is_patch }","title":"parse_commit()"},{"location":"reference/commit/#git_changelog.commit.BasicStyle.parse_type","text":"Parse the type of the commit given its subject. PARAMETER DESCRIPTION commit_subject The commit message subject. TYPE: str RETURNS The commit type. TYPE: str Source code in git_changelog/commit.py def parse_type ( self , commit_subject : str ) -> str : \"\"\"Parse the type of the commit given its subject. Arguments: commit_subject: The commit message subject. Returns: The commit type. \"\"\" type_match = self . TYPE_REGEX . match ( commit_subject ) if type_match : return self . TYPES . get ( type_match . groupdict ()[ \"type\" ] . lower (), \"\" ) return \"\"","title":"parse_type()"},{"location":"reference/commit/#git_changelog.commit.Commit","text":"A class to represent a commit.","title":"Commit"},{"location":"reference/commit/#git_changelog.commit.Commit.__init__","text":"Initialization method. PARAMETER DESCRIPTION commit_hash The commit hash. TYPE: str author_name The author name. TYPE: str DEFAULT: '' author_email The author email. TYPE: str DEFAULT: '' author_date The authoring date. TYPE: str DEFAULT: '' committer_name The committer name. TYPE: str DEFAULT: '' committer_email The committer email. TYPE: str DEFAULT: '' committer_date The committing date. TYPE: str DEFAULT: '' refs The commit refs. TYPE: str DEFAULT: '' subject The commit message subject. TYPE: str DEFAULT: '' body The commit message body. TYPE: List[str] DEFAULT: None url The commit URL. TYPE: str DEFAULT: '' Source code in git_changelog/commit.py def __init__ ( self , commit_hash : str , author_name : str = \"\" , author_email : str = \"\" , author_date : str = \"\" , committer_name : str = \"\" , committer_email : str = \"\" , committer_date : str = \"\" , refs : str = \"\" , subject : str = \"\" , body : List [ str ] = None , url : str = \"\" , ): \"\"\" Initialization method. Arguments: commit_hash: The commit hash. author_name: The author name. author_email: The author email. author_date: The authoring date. committer_name: The committer name. committer_email: The committer email. committer_date: The committing date. refs: The commit refs. subject: The commit message subject. body: The commit message body. url: The commit URL. \"\"\" self . hash : str = commit_hash self . author_name : str = author_name self . author_email : str = author_email self . author_date : datetime = datetime . utcfromtimestamp ( float ( author_date )) self . committer_name : str = committer_name self . committer_email : str = committer_email self . committer_date : datetime = datetime . utcfromtimestamp ( float ( committer_date )) self . subject : str = subject self . body : List [ str ] = body or [] self . url : str = url tag = \"\" for ref in refs . split ( \",\" ): ref = ref . strip () if ref . startswith ( \"tag: \" ): tag = ref . replace ( \"tag: \" , \"\" ) break self . tag : str = tag self . version : str = tag self . text_refs : Dict [ str , List [ Ref ]] = {} self . style : Dict [ str , Any ] = {}","title":"__init__()"},{"location":"reference/commit/#git_changelog.commit.Commit.update_with_provider","text":"Apply the provider-parsed data to this commit. PARAMETER DESCRIPTION provider The provider to use. TYPE: ProviderRefParser Source code in git_changelog/commit.py def update_with_provider ( self , provider : ProviderRefParser ) -> None : \"\"\" Apply the provider-parsed data to this commit. Arguments: provider: The provider to use. \"\"\" # set the commit url based on provider # FIXME: hardcoded 'commits' if \"commits\" in provider . REF : self . url = provider . build_ref_url ( \"commits\" , { \"ref\" : self . hash }) else : # use default \"commit\" url (could be wrong) self . url = f \" { provider . url } / { provider . namespace } / { provider . project } /commit/ { self . hash } \" # build commit text references from its subject and body for ref_type in provider . REF . keys (): self . text_refs [ ref_type ] = provider . get_refs ( ref_type , \" \\n \" . join ([ self . subject ] + self . body )) if \"issues\" in self . text_refs : self . text_refs [ \"issues_not_in_subject\" ] = [] for issue in self . text_refs [ \"issues\" ]: if issue . ref not in self . subject : self . text_refs [ \"issues_not_in_subject\" ] . append ( issue )","title":"update_with_provider()"},{"location":"reference/commit/#git_changelog.commit.Commit.update_with_style","text":"Apply the style-parsed data to this commit. PARAMETER DESCRIPTION style The style to use. TYPE: CommitStyle Source code in git_changelog/commit.py def update_with_style ( self , style : \"CommitStyle\" ) -> None : \"\"\" Apply the style-parsed data to this commit. Arguments: style: The style to use. \"\"\" self . style . update ( style . parse_commit ( self ))","title":"update_with_style()"},{"location":"reference/commit/#git_changelog.commit.CommitStyle","text":"A base class for a style of commit messages.","title":"CommitStyle"},{"location":"reference/commit/#git_changelog.commit.CommitStyle.parse_commit","text":"Parse the commit to extract information. PARAMETER DESCRIPTION commit The commit to parse. TYPE: Commit RETURNS A dictionary containing the parsed data. TYPE: Dict[str, Union[str, bool]] Source code in git_changelog/commit.py @abstractmethod def parse_commit ( self , commit : Commit ) -> Dict [ str , Union [ str , bool ]]: \"\"\" Parse the commit to extract information. Arguments: commit: The commit to parse. Returns: A dictionary containing the parsed data. \"\"\" # noqa: DAR202,DAR401 raise NotImplementedError","title":"parse_commit()"},{"location":"reference/commit/#git_changelog.commit.ConventionalCommitStyle","text":"Conventional commit message style.","title":"ConventionalCommitStyle"},{"location":"reference/commit/#git_changelog.commit.ConventionalCommitStyle.parse_commit","text":"Parse the commit to extract information. PARAMETER DESCRIPTION commit The commit to parse. TYPE: Commit RETURNS A dictionary containing the parsed data. TYPE: Dict[str, Union[str, bool]] Source code in git_changelog/commit.py def parse_commit ( self , commit : Commit ) -> Dict [ str , Union [ str , bool ]]: # noqa: D102 (use parent docstring) subject = self . parse_subject ( commit . subject ) message = \" \\n \" . join ([ commit . subject ] + commit . body ) is_major = self . is_major ( message ) or subject . get ( \"breaking\" ) == \"!\" is_minor = not is_major and self . is_minor ( subject [ \"type\" ]) is_patch = not any (( is_major , is_minor )) return { \"type\" : subject [ \"type\" ], \"scope\" : subject [ \"scope\" ], \"subject\" : subject [ \"subject\" ], \"is_major\" : is_major , \"is_minor\" : is_minor , \"is_patch\" : is_patch , }","title":"parse_commit()"},{"location":"reference/providers/","text":"Module containing the parsing utilities for git providers. GitHub ( ProviderRefParser ) \u00a4 A parser for the GitHub references. __init__ ( self , namespace , project , url = 'https://github.com' ) special \u00a4 Initialization method. PARAMETER DESCRIPTION namespace The GitHub namespace. TYPE: str project The GitHub project. TYPE: str url The GitHub URL. TYPE: str DEFAULT: 'https://github.com' Source code in git_changelog/providers.py def __init__ ( self , namespace : str , project : str , url : str = url ): \"\"\" Initialization method. Arguments: namespace: The GitHub namespace. project: The GitHub project. url: The GitHub URL. \"\"\" self . namespace : str = namespace self . project : str = project self . url : str = url # noqa: WPS601 (shadowing but uses class' as default) build_ref_url ( self , ref_type , match_dict ) \u00a4 Build the URL for a reference type and a dictionary of matched groups. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str match_dict The matched groups. TYPE: Dict[str, str] RETURNS The built URL. TYPE: str Source code in git_changelog/providers.py def build_ref_url ( self , ref_type : str , match_dict : Dict [ str , str ]) -> str : # noqa: D102 (use parent docstring) match_dict [ \"base_url\" ] = self . url if not match_dict . get ( \"namespace\" ): match_dict [ \"namespace\" ] = self . namespace if not match_dict . get ( \"project\" ): match_dict [ \"project\" ] = self . project return super () . build_ref_url ( ref_type , match_dict ) get_compare_url ( self , base , target ) \u00a4 Get the URL for a tag comparison. PARAMETER DESCRIPTION base The base tag. TYPE: str target The target tag. TYPE: str RETURNS The comparison URL. TYPE: str Source code in git_changelog/providers.py def get_compare_url ( self , base : str , target : str ) -> str : # noqa: D102 (use parent docstring) return self . build_ref_url ( \"commits_ranges\" , { \"ref\" : f \" { base } ... { target } \" }) get_tag_url ( self , tag = '' ) \u00a4 Get the URL for a git tag. PARAMETER DESCRIPTION tag The git tag. TYPE: str DEFAULT: '' RETURNS The tag URL. TYPE: str Source code in git_changelog/providers.py def get_tag_url ( self , tag : str = \"\" ) -> str : # noqa: D102,WPS615 return self . tag_url . format ( base_url = self . url , namespace = self . namespace , project = self . project , ref = tag ) GitLab ( ProviderRefParser ) \u00a4 A parser for the GitLab references. __init__ ( self , namespace , project , url = 'https://gitlab.com' ) special \u00a4 Initialization method. PARAMETER DESCRIPTION namespace The GitLab namespace. TYPE: str project The GitLab project. TYPE: str url The GitLab URL. TYPE: str DEFAULT: 'https://gitlab.com' Source code in git_changelog/providers.py def __init__ ( self , namespace : str , project : str , url : str = url ): \"\"\" Initialization method. Arguments: namespace: The GitLab namespace. project: The GitLab project. url: The GitLab URL. \"\"\" self . namespace : str = namespace self . project : str = project self . url : str = url # noqa: WPS601 (shadowing but uses class' as default) build_ref_url ( self , ref_type , match_dict ) \u00a4 Build the URL for a reference type and a dictionary of matched groups. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str match_dict The matched groups. TYPE: Dict[str, str] RETURNS The built URL. TYPE: str Source code in git_changelog/providers.py def build_ref_url ( self , ref_type : str , match_dict : Dict [ str , str ]) -> str : # noqa: D102 (use parent docstring) match_dict [ \"base_url\" ] = self . url if not match_dict . get ( \"namespace\" ): match_dict [ \"namespace\" ] = self . namespace if not match_dict . get ( \"project\" ): match_dict [ \"project\" ] = self . project if ref_type . startswith ( \"label\" ): match_dict [ \"ref\" ] = match_dict [ \"ref\" ] . replace ( '\"' , \"\" ) . replace ( \" \" , \"+\" ) return super () . build_ref_url ( ref_type , match_dict ) get_compare_url ( self , base , target ) \u00a4 Get the URL for a tag comparison. PARAMETER DESCRIPTION base The base tag. TYPE: str target The target tag. TYPE: str RETURNS The comparison URL. TYPE: str Source code in git_changelog/providers.py def get_compare_url ( self , base : str , target : str ) -> str : # noqa: D102 (use parent docstring) return self . build_ref_url ( \"commits_ranges\" , { \"ref\" : f \" { base } ... { target } \" }) get_tag_url ( self , tag = '' ) \u00a4 Get the URL for a git tag. PARAMETER DESCRIPTION tag The git tag. TYPE: str DEFAULT: '' RETURNS The tag URL. TYPE: str Source code in git_changelog/providers.py def get_tag_url ( self , tag : str = \"\" ) -> str : # noqa: D102,WPS615 return self . tag_url . format ( base_url = self . url , namespace = self . namespace , project = self . project , ref = tag ) ProviderRefParser ( ABC ) \u00a4 A base class for specific providers reference parsers. build_ref_url ( self , ref_type , match_dict ) \u00a4 Build the URL for a reference type and a dictionary of matched groups. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str match_dict The matched groups. TYPE: Dict[str, str] RETURNS The built URL. TYPE: str Source code in git_changelog/providers.py def build_ref_url ( self , ref_type : str , match_dict : Dict [ str , str ]) -> str : \"\"\" Build the URL for a reference type and a dictionary of matched groups. Arguments: ref_type: The reference type. match_dict: The matched groups. Returns: The built URL. \"\"\" return self . REF [ ref_type ] . url_string . format ( ** match_dict ) get_compare_url ( self , base , target ) \u00a4 Get the URL for a tag comparison. PARAMETER DESCRIPTION base The base tag. TYPE: str target The target tag. TYPE: str RETURNS The comparison URL. TYPE: str Source code in git_changelog/providers.py @abstractmethod def get_compare_url ( self , base : str , target : str ) -> str : \"\"\" Get the URL for a tag comparison. Arguments: base: The base tag. target: The target tag. Returns: The comparison URL. \"\"\" # noqa: DAR202,DAR401 raise NotImplementedError get_refs ( self , ref_type , text ) \u00a4 Find all references in the given text. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str text The text in which to search references. TYPE: str RETURNS A list of references (instances of Ref ). TYPE: List[git_changelog.providers.Ref] Source code in git_changelog/providers.py def get_refs ( self , ref_type : str , text : str ) -> List [ Ref ]: \"\"\" Find all references in the given text. Arguments: ref_type: The reference type. text: The text in which to search references. Returns: A list of references (instances of [Ref][git_changelog.providers.Ref]). \"\"\" return [ Ref ( ref = match . group () . strip (), url = self . build_ref_url ( ref_type , match . groupdict ())) for match in self . parse_refs ( ref_type , text ) ] get_tag_url ( self , tag ) \u00a4 Get the URL for a git tag. PARAMETER DESCRIPTION tag The git tag. TYPE: str RETURNS The tag URL. TYPE: str Source code in git_changelog/providers.py @abstractmethod def get_tag_url ( self , tag : str ) -> str : \"\"\" Get the URL for a git tag. Arguments: tag: The git tag. Returns: The tag URL. \"\"\" # noqa: DAR202,DAR401 raise NotImplementedError parse_refs ( self , ref_type , text ) \u00a4 Parse references in the given text. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str text The text to parse. TYPE: str RETURNS A list of regular expressions matches. TYPE: List[Match] Source code in git_changelog/providers.py def parse_refs ( self , ref_type : str , text : str ) -> List [ Match ]: \"\"\" Parse references in the given text. Arguments: ref_type: The reference type. text: The text to parse. Returns: A list of regular expressions matches. \"\"\" if ref_type not in self . REF : refs = [ key for key in self . REF . keys () if key . startswith ( ref_type )] return [ match for ref in refs for match in self . REF [ ref ] . regex . finditer ( text )] return list ( self . REF [ ref_type ] . regex . finditer ( text )) Ref \u00a4 A class to represent a reference and its URL. __init__ ( self , ref , url ) special \u00a4 Initialization method. PARAMETER DESCRIPTION ref The reference text. TYPE: str url The reference URL. TYPE: str Source code in git_changelog/providers.py def __init__ ( self , ref : str , url : str ) -> None : \"\"\" Initialization method. Arguments: ref: The reference text. url: The reference URL. \"\"\" self . ref : str = ref self . url : str = url RefDef \u00a4 A class to store a reference regular expression and URL building string. __init__ ( self , regex , url_string ) special \u00a4 Initialization method. PARAMETER DESCRIPTION regex The regular expression to match the reference. TYPE: Pattern url_string The URL string to format using matched groups. TYPE: str Source code in git_changelog/providers.py def __init__ ( self , regex : Pattern , url_string : str ): \"\"\" Initialization method. Arguments: regex: The regular expression to match the reference. url_string: The URL string to format using matched groups. \"\"\" self . regex = regex self . url_string = url_string RefRe \u00a4 An enum helper to store parts of regular expressions for references.","title":"providers.py"},{"location":"reference/providers/#git_changelog.providers.GitHub","text":"A parser for the GitHub references.","title":"GitHub"},{"location":"reference/providers/#git_changelog.providers.GitHub.__init__","text":"Initialization method. PARAMETER DESCRIPTION namespace The GitHub namespace. TYPE: str project The GitHub project. TYPE: str url The GitHub URL. TYPE: str DEFAULT: 'https://github.com' Source code in git_changelog/providers.py def __init__ ( self , namespace : str , project : str , url : str = url ): \"\"\" Initialization method. Arguments: namespace: The GitHub namespace. project: The GitHub project. url: The GitHub URL. \"\"\" self . namespace : str = namespace self . project : str = project self . url : str = url # noqa: WPS601 (shadowing but uses class' as default)","title":"__init__()"},{"location":"reference/providers/#git_changelog.providers.GitHub.build_ref_url","text":"Build the URL for a reference type and a dictionary of matched groups. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str match_dict The matched groups. TYPE: Dict[str, str] RETURNS The built URL. TYPE: str Source code in git_changelog/providers.py def build_ref_url ( self , ref_type : str , match_dict : Dict [ str , str ]) -> str : # noqa: D102 (use parent docstring) match_dict [ \"base_url\" ] = self . url if not match_dict . get ( \"namespace\" ): match_dict [ \"namespace\" ] = self . namespace if not match_dict . get ( \"project\" ): match_dict [ \"project\" ] = self . project return super () . build_ref_url ( ref_type , match_dict )","title":"build_ref_url()"},{"location":"reference/providers/#git_changelog.providers.GitHub.get_compare_url","text":"Get the URL for a tag comparison. PARAMETER DESCRIPTION base The base tag. TYPE: str target The target tag. TYPE: str RETURNS The comparison URL. TYPE: str Source code in git_changelog/providers.py def get_compare_url ( self , base : str , target : str ) -> str : # noqa: D102 (use parent docstring) return self . build_ref_url ( \"commits_ranges\" , { \"ref\" : f \" { base } ... { target } \" })","title":"get_compare_url()"},{"location":"reference/providers/#git_changelog.providers.GitHub.get_tag_url","text":"Get the URL for a git tag. PARAMETER DESCRIPTION tag The git tag. TYPE: str DEFAULT: '' RETURNS The tag URL. TYPE: str Source code in git_changelog/providers.py def get_tag_url ( self , tag : str = \"\" ) -> str : # noqa: D102,WPS615 return self . tag_url . format ( base_url = self . url , namespace = self . namespace , project = self . project , ref = tag )","title":"get_tag_url()"},{"location":"reference/providers/#git_changelog.providers.GitLab","text":"A parser for the GitLab references.","title":"GitLab"},{"location":"reference/providers/#git_changelog.providers.GitLab.__init__","text":"Initialization method. PARAMETER DESCRIPTION namespace The GitLab namespace. TYPE: str project The GitLab project. TYPE: str url The GitLab URL. TYPE: str DEFAULT: 'https://gitlab.com' Source code in git_changelog/providers.py def __init__ ( self , namespace : str , project : str , url : str = url ): \"\"\" Initialization method. Arguments: namespace: The GitLab namespace. project: The GitLab project. url: The GitLab URL. \"\"\" self . namespace : str = namespace self . project : str = project self . url : str = url # noqa: WPS601 (shadowing but uses class' as default)","title":"__init__()"},{"location":"reference/providers/#git_changelog.providers.GitLab.build_ref_url","text":"Build the URL for a reference type and a dictionary of matched groups. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str match_dict The matched groups. TYPE: Dict[str, str] RETURNS The built URL. TYPE: str Source code in git_changelog/providers.py def build_ref_url ( self , ref_type : str , match_dict : Dict [ str , str ]) -> str : # noqa: D102 (use parent docstring) match_dict [ \"base_url\" ] = self . url if not match_dict . get ( \"namespace\" ): match_dict [ \"namespace\" ] = self . namespace if not match_dict . get ( \"project\" ): match_dict [ \"project\" ] = self . project if ref_type . startswith ( \"label\" ): match_dict [ \"ref\" ] = match_dict [ \"ref\" ] . replace ( '\"' , \"\" ) . replace ( \" \" , \"+\" ) return super () . build_ref_url ( ref_type , match_dict )","title":"build_ref_url()"},{"location":"reference/providers/#git_changelog.providers.GitLab.get_compare_url","text":"Get the URL for a tag comparison. PARAMETER DESCRIPTION base The base tag. TYPE: str target The target tag. TYPE: str RETURNS The comparison URL. TYPE: str Source code in git_changelog/providers.py def get_compare_url ( self , base : str , target : str ) -> str : # noqa: D102 (use parent docstring) return self . build_ref_url ( \"commits_ranges\" , { \"ref\" : f \" { base } ... { target } \" })","title":"get_compare_url()"},{"location":"reference/providers/#git_changelog.providers.GitLab.get_tag_url","text":"Get the URL for a git tag. PARAMETER DESCRIPTION tag The git tag. TYPE: str DEFAULT: '' RETURNS The tag URL. TYPE: str Source code in git_changelog/providers.py def get_tag_url ( self , tag : str = \"\" ) -> str : # noqa: D102,WPS615 return self . tag_url . format ( base_url = self . url , namespace = self . namespace , project = self . project , ref = tag )","title":"get_tag_url()"},{"location":"reference/providers/#git_changelog.providers.ProviderRefParser","text":"A base class for specific providers reference parsers.","title":"ProviderRefParser"},{"location":"reference/providers/#git_changelog.providers.ProviderRefParser.build_ref_url","text":"Build the URL for a reference type and a dictionary of matched groups. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str match_dict The matched groups. TYPE: Dict[str, str] RETURNS The built URL. TYPE: str Source code in git_changelog/providers.py def build_ref_url ( self , ref_type : str , match_dict : Dict [ str , str ]) -> str : \"\"\" Build the URL for a reference type and a dictionary of matched groups. Arguments: ref_type: The reference type. match_dict: The matched groups. Returns: The built URL. \"\"\" return self . REF [ ref_type ] . url_string . format ( ** match_dict )","title":"build_ref_url()"},{"location":"reference/providers/#git_changelog.providers.ProviderRefParser.get_compare_url","text":"Get the URL for a tag comparison. PARAMETER DESCRIPTION base The base tag. TYPE: str target The target tag. TYPE: str RETURNS The comparison URL. TYPE: str Source code in git_changelog/providers.py @abstractmethod def get_compare_url ( self , base : str , target : str ) -> str : \"\"\" Get the URL for a tag comparison. Arguments: base: The base tag. target: The target tag. Returns: The comparison URL. \"\"\" # noqa: DAR202,DAR401 raise NotImplementedError","title":"get_compare_url()"},{"location":"reference/providers/#git_changelog.providers.ProviderRefParser.get_refs","text":"Find all references in the given text. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str text The text in which to search references. TYPE: str RETURNS A list of references (instances of Ref ). TYPE: List[git_changelog.providers.Ref] Source code in git_changelog/providers.py def get_refs ( self , ref_type : str , text : str ) -> List [ Ref ]: \"\"\" Find all references in the given text. Arguments: ref_type: The reference type. text: The text in which to search references. Returns: A list of references (instances of [Ref][git_changelog.providers.Ref]). \"\"\" return [ Ref ( ref = match . group () . strip (), url = self . build_ref_url ( ref_type , match . groupdict ())) for match in self . parse_refs ( ref_type , text ) ]","title":"get_refs()"},{"location":"reference/providers/#git_changelog.providers.ProviderRefParser.get_tag_url","text":"Get the URL for a git tag. PARAMETER DESCRIPTION tag The git tag. TYPE: str RETURNS The tag URL. TYPE: str Source code in git_changelog/providers.py @abstractmethod def get_tag_url ( self , tag : str ) -> str : \"\"\" Get the URL for a git tag. Arguments: tag: The git tag. Returns: The tag URL. \"\"\" # noqa: DAR202,DAR401 raise NotImplementedError","title":"get_tag_url()"},{"location":"reference/providers/#git_changelog.providers.ProviderRefParser.parse_refs","text":"Parse references in the given text. PARAMETER DESCRIPTION ref_type The reference type. TYPE: str text The text to parse. TYPE: str RETURNS A list of regular expressions matches. TYPE: List[Match] Source code in git_changelog/providers.py def parse_refs ( self , ref_type : str , text : str ) -> List [ Match ]: \"\"\" Parse references in the given text. Arguments: ref_type: The reference type. text: The text to parse. Returns: A list of regular expressions matches. \"\"\" if ref_type not in self . REF : refs = [ key for key in self . REF . keys () if key . startswith ( ref_type )] return [ match for ref in refs for match in self . REF [ ref ] . regex . finditer ( text )] return list ( self . REF [ ref_type ] . regex . finditer ( text ))","title":"parse_refs()"},{"location":"reference/providers/#git_changelog.providers.Ref","text":"A class to represent a reference and its URL.","title":"Ref"},{"location":"reference/providers/#git_changelog.providers.Ref.__init__","text":"Initialization method. PARAMETER DESCRIPTION ref The reference text. TYPE: str url The reference URL. TYPE: str Source code in git_changelog/providers.py def __init__ ( self , ref : str , url : str ) -> None : \"\"\" Initialization method. Arguments: ref: The reference text. url: The reference URL. \"\"\" self . ref : str = ref self . url : str = url","title":"__init__()"},{"location":"reference/providers/#git_changelog.providers.RefDef","text":"A class to store a reference regular expression and URL building string.","title":"RefDef"},{"location":"reference/providers/#git_changelog.providers.RefDef.__init__","text":"Initialization method. PARAMETER DESCRIPTION regex The regular expression to match the reference. TYPE: Pattern url_string The URL string to format using matched groups. TYPE: str Source code in git_changelog/providers.py def __init__ ( self , regex : Pattern , url_string : str ): \"\"\" Initialization method. Arguments: regex: The regular expression to match the reference. url_string: The URL string to format using matched groups. \"\"\" self . regex = regex self . url_string = url_string","title":"__init__()"},{"location":"reference/providers/#git_changelog.providers.RefRe","text":"An enum helper to store parts of regular expressions for references.","title":"RefRe"},{"location":"reference/templates/__init__/","text":"The subpackage containing the builtin templates. get_custom_template ( path ) \u00a4 Get a custom templates' path. PARAMETER DESCRIPTION path Path to the directory containing templates. TYPE: str RETURNS The Jinja template. TYPE: Template Source code in git_changelog/templates/__init__.py def get_custom_template ( path : str ) -> Template : \"\"\"Get a custom templates' path. Arguments: path: Path to the directory containing templates. Returns: The Jinja template. \"\"\" return get_env ( os . path . abspath ( path )) . get_template ( \"changelog.md\" ) get_env ( path ) \u00a4 Get the Jinja environment. PARAMETER DESCRIPTION path The path to give to the Jinja file system loader. TYPE: str RETURNS The Jinja environment. TYPE: Environment Source code in git_changelog/templates/__init__.py def get_env ( path : str ) -> Environment : \"\"\"Get the Jinja environment. Arguments: path: The path to give to the Jinja file system loader. Returns: The Jinja environment. \"\"\" return Environment ( loader = FileSystemLoader ( path )) # noqa: S701 (we are OK with not auto-escaping) get_path () \u00a4 Get the path to the templates directory. RETURNS The path to the templates directory. TYPE: str Source code in git_changelog/templates/__init__.py def get_path () -> str : \"\"\"Get the path to the templates directory. Returns: The path to the templates directory. \"\"\" return os . path . dirname ( os . path . abspath ( __file__ )) get_template ( name ) \u00a4 Get a builtin template path. PARAMETER DESCRIPTION name The template name. TYPE: str RETURNS The Jinja template. TYPE: Template Source code in git_changelog/templates/__init__.py def get_template ( name : str ) -> Template : \"\"\"Get a builtin template path. Arguments: name: The template name. Returns: The Jinja template. \"\"\" return get_env ( os . path . join ( get_path (), name )) . get_template ( \"changelog.md\" )","title":"__init__.py"},{"location":"reference/templates/__init__/#git_changelog.templates.__init__.get_custom_template","text":"Get a custom templates' path. PARAMETER DESCRIPTION path Path to the directory containing templates. TYPE: str RETURNS The Jinja template. TYPE: Template Source code in git_changelog/templates/__init__.py def get_custom_template ( path : str ) -> Template : \"\"\"Get a custom templates' path. Arguments: path: Path to the directory containing templates. Returns: The Jinja template. \"\"\" return get_env ( os . path . abspath ( path )) . get_template ( \"changelog.md\" )","title":"get_custom_template()"},{"location":"reference/templates/__init__/#git_changelog.templates.__init__.get_env","text":"Get the Jinja environment. PARAMETER DESCRIPTION path The path to give to the Jinja file system loader. TYPE: str RETURNS The Jinja environment. TYPE: Environment Source code in git_changelog/templates/__init__.py def get_env ( path : str ) -> Environment : \"\"\"Get the Jinja environment. Arguments: path: The path to give to the Jinja file system loader. Returns: The Jinja environment. \"\"\" return Environment ( loader = FileSystemLoader ( path )) # noqa: S701 (we are OK with not auto-escaping)","title":"get_env()"},{"location":"reference/templates/__init__/#git_changelog.templates.__init__.get_path","text":"Get the path to the templates directory. RETURNS The path to the templates directory. TYPE: str Source code in git_changelog/templates/__init__.py def get_path () -> str : \"\"\"Get the path to the templates directory. Returns: The path to the templates directory. \"\"\" return os . path . dirname ( os . path . abspath ( __file__ ))","title":"get_path()"},{"location":"reference/templates/__init__/#git_changelog.templates.__init__.get_template","text":"Get a builtin template path. PARAMETER DESCRIPTION name The template name. TYPE: str RETURNS The Jinja template. TYPE: Template Source code in git_changelog/templates/__init__.py def get_template ( name : str ) -> Template : \"\"\"Get a builtin template path. Arguments: name: The template name. Returns: The Jinja template. \"\"\" return get_env ( os . path . join ( get_path (), name )) . get_template ( \"changelog.md\" )","title":"get_template()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}